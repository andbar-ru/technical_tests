* Создал слои, стараясь придерживаться принципов "Чистой архитектуры":
** Сущности: entities
** Сценарии: usecases
** Интерфейсы: interfaces. Там репозитории и веб-сервис.
** Инфраструктура: infrastructura. Там реализации логгера и хранилища.

* На самом верхнем уровне (main) оставил только маршрутизатор и хэндлеры. Хэндлеры просто вызывают
  методы веб-сервиса, который располагается в слое интерфейсов. Все зависимости веб-сервиса
  передаются ему через инъекции.

* Структуры Order и RoomAvailability поместил в слой сущностей.
** Определил новый тип Date, включающий в себя time.Time и переопределяющий метод UnmarshalJSON,
   чтобы позволять передавать клиентам не полное время, а только дату. Время нам без надобности,
   бронирование производится только по датам.
** Тип полей Order.{From,To} и RoomAvailability.Date изменил на Date.
** Добавил сущностям поле ID, так как остальные поля в сущностях не уникальны.
** Добавил валидацию заказа, чтобы не пытаться забронировать некорректный заказ.
** Добавил сущность AppError, чтобы отличать ошибки приложения от библиотечных ошибок.

* В слое сценариев определены интерфейсы журнала, репозитория, а также реализован обработчик
  заказов OrderHandler.

* В слое интерфейсов определены интерфейсы хранилища и реализованы репозитории и веб-сервис.
** Сделал, чтобы веб-сервис ошибки также возвращал в виде json.
** В значениях полей "from" и "to" допустил передачу только дат, без времени. Для этого пришлось
   добавить новый тип Date, включающий time.Time.
** Для Order и RoomAvailability сделал единый репозиторий, потому что они сильно связаны.

* В слое инфраструктуры реализованы журнал и хранилище.
** В реализации журнала префикс перенёс в начало строки и представил в верхнем регистре.

* В реализациях реализовывал только те методы, которые используются, за некоторым исключением.

Исправил следующие проблемы:
* Обработал ошибку парсинга json-тела запроса. Если произошла ошибки, то клиенту сразу возвращается
  ответ со статусом 400.
* Добавил валидацию структуры нового заказa на обязательные поля, а также кроссвалидацию полей
  "from" и "to". Если структура невалидна, то возвращается 400.
* Изменил код статуса с 501 на 409, если не удалось забронировать.
* RoomAvailability 
